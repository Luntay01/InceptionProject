#FastCGI
#FastCGI is a protocol for interfacing interactive programs with a web server. 
#It is an improvement over the earlier Common Gateway Interface (CGI) because 
#it provides better performance by keeping the program running in a persistent 
#process rather than starting a new process for each request.
#Performance: FastCGI can handle more requests per second compared to CGI, which starts a new process for each request.
#Efficiency: It reduces the overhead of starting and stopping processes, making resource utilization more efficient.
#Scalability: It allows for better scalability of web applications, as the web server can handle a larger number of simultaneous requests.
#Interoperability: It allows different web servers to communicate with various programming languages and runtime environments consistently.

#$uri
#The $uri variable is commonly used to define how NGINX should handle incoming requests, enabling features like routing and rewriting rules.
#location /:
#Handles general requests to the website.
#Tries to serve static files or directories if they exist ($uri and $uri/).
#Falls back to index.php if the requested file or directory doesn't exist.
#This block will typically handle most requests, as WordPress uses index.php as the front controller for routing requests internally.

#location ~ \.php$:
#Specifically handles requests for PHP files.
#Ensures that PHP files are processed by the FastCGI server (e.g., PHP-FPM).
#Essential for executing PHP code, such as when WordPress processes dynamic content.

#Dynamic content
#Dynamic content refers to web content that changes based on user interactions, data, 
#or other real-time factors. Unlike static content, which remains the same until manually updated, dynamic content is generated 
#on-the-fly by server-side scripts (such as PHP in a WordPress site) based on various inputs. This allows for personalized experiences, 
#interactive features, and up-to-date information. Examples include user-specific dashboards, real-time updates, content management systems 
#like WordPress, and e-commerce sites that show different products based on user preferences or behavior

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name DOMAIN_NAME;
    index index.php;
    root WP_PATH;

    ssl_certificate CERTS_CRT;
    ssl_certificate_key CERTS_KEY;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass PHP_HOST:PHP_PORT;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}