#add a user so they dont need to type sudo anymore
sudo visudo
your_username ALL=(ALL) NOPASSWD:ALL
#or change it just for a specific commands
user ALL=(ALL) NOPASSWD:/usr/bin/docker-compose

docker stop $(docker ps -qa); docker rm $(docker ps -qa); docker rmi -f $(docker images -qa); docker volume rm $(docker volume ls -q); docker network rm $(docker network ls -q) 2>/dev/null
grep -E "network: host|links:" ./srcs/docker-compose.yml

#How Docker and Docker Compose Work
#Docker:
#Docker is a platform that uses containerization technology to package and run applications. 
#A Docker container is a lightweight, standalone, executable package that includes everything needed 
#to run a piece of software, including the code, runtime, libraries, and system tools. Containers are isolated 
#from each other and the host system, ensuring that they run the same way regardless of the environment.
#Images: Read-only templates that contain the application and its dependencies.
#Containers: Instances of Docker images that run as isolated processes on the host system.
#Docker Engine: The runtime that executes containers.
#Docker Compose:
#Docker Compose is a tool used to define and manage multi-container Docker applications. With 
#a single docker-compose.yml file, you can define multiple services, networks, and volumes, and manage their lifecycle with simple commands.
#Services: Define how containers run in your application (e.g., web server, database).
#Networks: Manage the communication between containers.
#Volumes: Persist data generated by and used by Docker containers.
#Difference Between a Docker Image Used With and Without Docker Compose
#Without Docker Compose:
#Single Container: Typically involves running a single container with the docker run command.
#Manual Linking: Requires manually linking containers together using the --link option or by creating custom networks.
#Complex Management: Managing multiple containers can become complex and error-prone as each 
#container needs to be started, stopped, and linked individually.
#With Docker Compose:
#Multi-Container Applications: Allows defining multiple services in a single file (docker-compose.yml), making it easy to manage.
#Automated Orchestration: Automatically manages the creation and configuration 
#of containers, networks, and volumes with simple commands (docker-compose up and docker-compose down).
#Consistency: Ensures consistent environment setup across different stages (development, testing, production) by using the same configuration file.
#
#Benefit of Docker Compared to VMs
#Efficiency:
#Resource Utilization: Docker containers share the host OS kernel, making them more lightweight and 
#faster to start compared to VMs, which require a full OS.
#Performance: Lower overhead due to shared kernel, resulting in better performance and less resource consumption.
#Portability:
#Consistency: Containers encapsulate all dependencies, ensuring consistent behavior across different environments (development, staging, production).
#Ease of Deployment: Simplifies the deployment process by packaging applications and their dependencies into a single unit.
#Scalability:
#Rapid Scaling: Containers can be quickly started or stopped, enabling rapid scaling of applications to handle varying loads.
#Microservices: Facilitates the development and deployment of microservices architectures by isolating services into individual containers.
#
#Pertinence of the Directory Structure
#The directory structure ensures that all configuration files, Dockerfiles, and other 
#necessary components are organized and easily accessible. This organization enhances clarity, 
#maintainability, and collaboration within the project. For example, placing all Docker-related files inside 
#a srcs directory keeps the root directory clean and focuses on application logic. This structure also aligns 
#with best practices, making it easier to manage the project and troubleshoot any issues that arise.
#pdf example
#This structure ensures separation of concerns, making it clear where configuration files, application logic, 
#and persistent data are located. It also simplifies the process of building, deploying, and managing the application by keeping related files together.

nginx command
#show that we should redirect HTTP (port 80) to HTTPS (port 443)
docker-compose exec nginx sh
cd /etc/nginx/sites-available/
cat default.conf
#Verify SSL/TLS Configuration
nginx -t
nginx -s reload
#and then this in regular bash also verifys ssl or when you try connect for the first tim there should be a warning for selfsigned ssl's
openssl s_client -connect kmordaun.42.fr:443 -tls1_2+
openssl s_client -connect kmordaun.42.fr:443 -tls1_3



docker-compose exec wordpress sh
#Verify the presence of the wp-config.php file:
ls /var/www/wordpress/wp-config.php

#check docker network exist
docker network ls
#Explanation of Docker Networks
#Docker networks allow containers to communicate with each other, enabling them to function as a cohesive application stack. 
#here are the key points to understand about Docker networks:
#Isolation: Docker networks isolate containers from each other and the host system, ensuring secure communication within the defined network.
#Communication: Containers within the same Docker network can easily find and communicate with each other using their container names as hostnames.
#Types of Docker Networks:
#Bridge Network: The default network type. Containers connected to a bridge network can communicate with each other but are isolated from other bridge networks.
#Host Network: Removes network isolation between the container and the Docker host. Not used in this project.
#Overlay Network: Used for Docker Swarm services, enabling communication across multiple Docker daemons.
#Creating a Docker Network:
#Networks can be defined in the docker-compose.yml file to ensure that all containers in a composition are connected to the same network.
#Example from your docker-compose.yml:
#yaml
#Copy code
#networks:
#  srcs_inception:
#    driver: bridge
#Benefits:
#Simplifies communication setup between containers.
#Enhances security by isolating container communication.
#Supports complex application architectures.

#check wp-config.php file
docker-compose exec wordpress cat /var/www/wordpress/wp-config.php
#check database connection (passwordfor root is rootpassword)
docker-compose exec mariadb mysql -u root -p$MYSQL_ROOT_PASSWORD -e "SHOW DATABASES;"
#check volumes
docker volume ls
docker volume inspect <volume_name>

#mariadb access and login
docker-compose exec mariadb sh
mysql -u root -p
rootpassword
#SHOW DATABASES: This command lists all the databases managed by the MariaDB server.
#USE wordpress: This command switches the context to the WordPress database.
#SHOW TABLES: This command lists all the tables within the WordPress database, ensuring it is populated with the necessary WordPress tables.
SHOW DATABASES;
USE wordpress;
SHOW TABLES;

#restart and check changes are still there
docker-compose down
sudo reboot
cd ~/InceptionProject/srcs
docker-compose up -d
docker-compose ps